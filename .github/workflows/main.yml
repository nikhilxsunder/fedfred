name: Build, Publish and Sign Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      release_version:
        description: "Version to release (e.g., 1.2.3)"
        required: false
        type: string
      publish_to_pypi:
        description: "Publish to PyPI"
        required: false
        default: false
        type: boolean

jobs:
  build:
    name: Build distribution
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install --no-interaction

      - name: Build package
        run: poetry build

      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  publish-to-pypi:
    name: >-
      Publish Python distribution to PyPI
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_pypi == 'true')
    needs:
      - build
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.1

      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          poetry config pypi-token.pypi $POETRY_PYPI_TOKEN_PYPI
          poetry publish --no-interaction

  sign-and-release:
    name: >-
      Sign and publish GitHub Release
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_pypi == 'true')
    needs:
      - publish-to-pypi
    runs-on: ubuntu-latest

    permissions:
      contents: write
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: GPG sign packages
        run: |
          echo "GPG signing distribution packages..."
          for file in dist/*.tar.gz dist/*.whl; do
            if [ -f "$file" ]; then
              echo "Signing $file"
              gpg --detach-sign --armor "$file"
            fi
          done
          # List all files for debugging
          ls -la dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.release_version || github.ref_name }}
          name: Release ${{ github.event.inputs.release_version || github.ref_name }}
          draft: false
          prerelease: false
          files: |
            dist/*.tar.gz
            dist/*.whl
            dist/*.asc
            dist/*.json
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify GPG signatures
        run: |
          echo "Verifying GPG signatures..."
          for asc in dist/*.asc; do
            base_file="${asc%.asc}"
            if [ -f "$base_file" ]; then
              echo "Verifying signature for $base_file"
              gpg --verify "$asc" "$base_file"
            fi
          done
